import tensorflow as tf
import keras
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt

# Load the time series data
df = pd.read_csv('DIS_2006-01-01_to_2018-01-01.csv', index_col='date', parse_dates=['date'])

# Split the data into training and testing sets
train_size = int(0.8 * len(df))
train_data, test_data = df[0:train_size], df[train_size:]

# Check for missing values and fill them with mean values
if df.isnull().sum().any():
    print("Missing values found. Filling with mean values...")
    df.fillna(df.mean(), inplace=True)

# Normalize the data
scaler = MinMaxScaler()
train_data_scaled = scaler.fit_transform(train_data)
test_data_scaled = scaler.transform(test_data)

# Create and train the RNN model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(train_data_scaled.shape[1], 1)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(train_data_scaled, epochs=50, batch_size=32, verbose=2)

# Evaluate the model on the test data
mse = model.evaluate(test_data_scaled)
print("Mean Squared Error:", mse)

# Make predictions on the test data
predictions = model.predict(test_data_scaled)

# Calculate the Mean Absolute Percentage Error (MAPE)
def mape(y_true, y_pred):
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

mape_value = mape(test_data_scaled, predictions)
print("Mean Absolute Percentage Error:", mape_value)

# Visualize the results
plt.plot(test_data_scaled, label='Actual')
plt.plot(predictions, label='Predicted')
plt.legend()
plt.show()
from tf.keras.layers import LSTM, Dense

print(tf.__version__)
print(keras.__version__)
