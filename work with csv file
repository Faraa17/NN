import numpy as np
import pandas as pd


# Define activation function - sigmoid
def sigmoid(x):
    return 1 / (1 + np.exp(-x))


# Define derivative of sigmoid function
def sigmoid_derivative(x):
    return x * (1 - x)


# Define mean squared error loss function
def mean_squared_error(y_true, y_pred):
    return np.mean((y_true - y_pred) ** 2)


# Gradient descent
def gradient_descent(X, y_true, learning_rate, epochs, A, B):
    # Initialize weights
    np.random.seed(42)
    weights_input_hidden = np.random.rand(X.shape[1], A)
    weights_hidden_output = np.random.rand(A, B)
    errors = []

    for _ in range(epochs):
        # Forward propagation
        hidden_layer_input = np.dot(X, weights_input_hidden)
        hidden_layer_output = sigmoid(hidden_layer_input)

        output_layer_input = np.dot(hidden_layer_output, weights_hidden_output)
        output_layer_output = sigmoid(output_layer_input)

        # Error
        error = mean_squared_error(y_true, output_layer_output)
        errors.append(error)

        # Backpropagation
        output_error = y_true - output_layer_output
        output_delta = output_error * sigmoid_derivative(output_layer_output)

        hidden_error = output_delta.dot(weights_hidden_output.T)
        hidden_delta = hidden_error * sigmoid_derivative(hidden_layer_output)

        # Update weights
        weights_hidden_output += hidden_layer_output.T.dot(output_delta) * learning_rate
        weights_input_hidden += X.T.dot(hidden_delta) * learning_rate

    return errors


# Load data
df = pd.read_csv('flower_dataset.csv')
X = df[['petal_length', 'flowering_time']].values
y_true = pd.get_dummies(df['flower_type']).values  # Convert to one-hot encoding

# Network parameters
A = 5
B = 3
epochs = 200

# Learning rates to analyze
learning_rates = [0.1, 0.01, 0.001]

# Training for different learning rates
for learning_rate in learning_rates:
    print(f"Learning Rate: {learning_rate}")
    errors = gradient_descent(X, y_true, learning_rate, epochs, A, B)
    print(f"Mean Squared Error: {np.mean(errors)}")
